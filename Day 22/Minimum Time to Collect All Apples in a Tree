-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Question
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree.
Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. 
Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

Example 1:

Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Solution
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class Solution {
   public int minTime(
            int n, int[][] edges, List<Boolean> hasApple) {
        Set<Integer> visited = new HashSet<>();
        Map<Integer, Set<Integer>> adjacency = new HashMap<>();
        for (int i = 0; i < n; i++) {
            adjacency.put(i, new HashSet<>());
        }
        int e = edges.length;
        for (int i = 0; i < e; i++) {
            // undirected, 2 directional edges.
            adjacency.get(edges[i][0]).add(edges[i][1]);
            adjacency.get(edges[i][1]).add(edges[i][0]);
        }
        int res = visit(0, visited, adjacency, hasApple);
        if (res == 0) {
            return res;
        }
        return res - 2;
    }
    
    private int visit(
            int node, 
            Set<Integer> visited, 
            Map<Integer, Set<Integer>> adjacency, 
            List<Boolean> hasApple) {
        if (visited.contains(node)) {
            return 0;
        }
        visited.add(node);
        int res = 0;
        for (int neighbor : adjacency.get(node)) {
            res += visit(neighbor, visited, adjacency, hasApple);
        }
        if (res != 0 || hasApple.get(node)) {
            res += 2;
        }
        return res;
    }
}
